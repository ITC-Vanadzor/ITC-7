Սահմանենք մի քանի օպերատոր կամ ֆունկցիա․

1.mov x , y  - կրկնօրինակում է x-ի արժեքը y հասցեում
2.add x, y  - գումարում է x և y  ռեգիստրների պարունակությունը և գրում է r0 ռեգիստրում
3.greater x, y  - համեմատում է x և y  ռեգիստրների պարունակությունը` մեծագույնը գրում է r1 ռեգիստրում
4.jump x, y, z - համեմատում է x և y  ռեգիստրների պարունակությունը, և երբ x֊ի պարունակությունը
        մեծ է y֊ի պարունակությունից, անցում է կատարում z ցուցիչին։


0-ից 99 հասցեներւմ գրված են մեր պայմանական փոփոխականները որոնց սկզբնարժեքը հավասար է 0֊ի

100 հասցեում գրված է մեր մատրիցայի չափսը՝ n֊ը,
101 հասցեից մինչև 101+n*n  գրված են մեր տվյալները։

0 հասցեում պահենք 0,
1 հասցեում պահենք 1,
պայմանական i֊ի արժեքը պահենք 2 հասցեում,
j-ի արժեքը 2 հասցեում,
k-ի արժեքը 3 հասցեում,
բազմապատկում կատարելու համար օգտագործենք 4֊րդ, 5-րդ, 6-րդ և 7-րդ։
4-րդում գրում ենք հաշվիչը, 5-րդում բազմապատկիչը,
6-րդում բազմապատկիչը, 7-րդում արդյունքը։
8-րդում պափումենք վերադարձի կետը
9-րդ հասցեում գրում ենք -1;
10-րդում պահում ենք n-1-ը


     բազմապատկում
     mov 0, 4
     mov 0, 5
     mov 0, 6
     mov 0, 7
metka_bazmapatkum
     add 1, 4
     mov r1, 4 /4-րդ հասցեի արժեքը ավելացրեցինք մեկով
     add 6, 7
     mov r1, 7 /7-րդ հասցեի արժեքը ավելացրեցինք 6-րդ հասցեում գրված արժեքով
     jump 5, 4, metka_bazmapatkum
     jump 0, 8, metka_main              // կվերադարնանք, թե ինչ գրենք 0֊ի փոխարեն
     jump 0, 8, metka_right_neighbor    // կվերադարնանք, թե ինչ գրենք 0֊ի փոխարեն




metka_right_neighbor
     mov 2, 3

     mov 2, 5
     mov 100, 6
     mov 0, 4
     mov 0, 7
     metka_bazmapatkum
     jump (101+7+3), 1, x1
     jump 3, 10, x0


     add 1, 3
     mov r1, 3
     jump 100, 3, metka_right_neighbor
x0
     add 9, 3
     mov r1, 3
x1










int right_neighbor(int** arr, int i, int j, int size)
{
  for (int k=j; k<size; ++k)
  {
      if (arr[i][k]==0 || k==(size-1))
         {
            return k;
         }
  }
}

bool up_neighbor(int** arr, int i, int j)
{
  if (i==0 || arr[i-1][j]==0)
     {
         return true;
     }
  return false;
}

int main()
{
  int field = -1;
  do
  {
    std::cout << "Please iput size of field n = ";
    std::cin >> field;
  }
  while (field < 2);

  int **a;
  a = new int *[field];
  for (int i =0; i<field; i ++)
        a[i] = new int [field];
  for (int i=0;i<field;++i)
  {
      for (int j=0;j<field;++j)
      {
         std::cout << "Please input a[" << i+1 << "][" << j+1 << "]= ";
         std::cin >> a[i][j];
      }
  }
  int count=0;
  for (int i=0;i<field;++i)
  {
      for (int j=0;j<field;++j)
      {
          if (a[i][j]==1 && up_neighbor(a, i, j))
          {
             j=right_neighbor(a, i, j, field);
             count=count+1;
          }
      }
  }
  std::cout << "Count of boat is equal " << count << std::endl;
  for (int i = 0; i<field; i ++)
        delete a[i];
  delete a;
  return 0;
}
